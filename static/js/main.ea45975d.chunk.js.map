{"version":3,"sources":["components/weather.js","components/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["weather","weatherData","WeatherIcon","styled","div","weatherIcon","main","icon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","className","name","Button","inverted","color","circular","onClick","window","location","reload","moment","format","style","fontSize","marginTop","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","Forecast","props","forecast","console","log","results","map","item","index","description","dt_txt","temperature","List","aria-label","App","useState","lat","setLat","long","setLong","setWeatherData","setForecast","error","setError","handleResponse","response","ok","json","Error","mapDataToWeatherInterface","data","mapped","date","dt","Math","round","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","Object","entries","length","getWeather","catch","err","message","forecastData","list","filter","match","getForecast","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea45975d.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport moment from 'moment';\nimport { Button } from 'semantic-ui-react';\nimport {\n  faCloud,\n  faBolt,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faSnowflake,\n  faSun,\n  faSmog,\n} from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function weather({weatherData}) {\n  \n  const WeatherIcon = styled.div`\n  color: whitesmoke;\n`;\n\n  const refresh = () => {\n    window.location.reload();\n  }\n\n  let weatherIcon = null;\n\n  if (weatherData.weather[0].main === 'Thunderstorm') {\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n  } else if (weatherData.weather[0].main === 'Drizzle') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (weatherData.weather[0].main === 'Rain') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (weatherData.weather[0].main === 'Snow') {\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (weatherData.weather[0].main === 'Clear') {\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\n  } else if (weatherData.weather[0].main === 'Clouds') {\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n  }\n\n  return (\n    <div className=\"main\">\n      <div className=\"top\">\n        <p className=\"header\">{weatherData.name}</p>\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n      </div>\n      <div className=\"flex\">\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\n        <div className=\"flex\">\n          <WeatherIcon style={{fontSize:30,marginTop:15}}>{weatherIcon}</WeatherIcon>\n          <p className=\"description\">{weatherData.weather[0].main}</p>\n        </div>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n      </div>\n    \n  </div>\n  )\n}\n","import React from \"react\";\nimport {\n  List\n} from \"@material-ui/core\";\nimport moment from 'moment';\nimport './styles.css';\nimport {\n  faCloud,\n  faBolt,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faSnowflake,\n  faSun,\n  faSmog,\n} from '@fortawesome/free-solid-svg-icons';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nexport default function Forecast(props, {weatherData}) {\n\n  const WeatherIcon = styled.div`\n  color: whitesmoke;\n`;\n\n  const { forecast } = props;\n\n  console.log(\"Forecast\", forecast);\n\n  const results = forecast.map((item, index) => {\n\n    let weatherIcon = null;\n\n    if (item.description === 'Thunderstorm') {\n      weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n    }else if (item.description === 'Drizzle') {\n      weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n    } else if (item.description === 'Rain') {\n      weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n    } else if (item.description === 'Snow') {\n      weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n    } else if (item.description === 'Clear') {\n      weatherIcon = <FontAwesomeIcon icon={faSun} />;\n    } else if (item.description === 'Clouds') {\n      weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n    } else {\n      weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n    }\n\n    return (\n      <div key={index} className=\"forecast\">\n        <div className=\"flex-forecast\">\n        <p>{moment(item.dt_txt).format(\"dddd\")}</p>\n      \n        <WeatherIcon style={{fontSize:25,marginTop:4}}>{weatherIcon}</WeatherIcon>\n\n        <p>\n          {item.temperature} &deg;C\n        </p>\n        </div>\n      </div>\n    )\n  })\n  \n  return(\n    <div>\n      <List aria-label=\"forecast data\">{results}</List>\n    </div>\n  );\n  \n}","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport Weather from './components/weather';\nimport Forecast from './components/forecast';\nexport default function App() {\n  \n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [weatherData, setWeatherData] = useState([]);\n  const [forecast, setForecast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n    \n      getWeather(lat, long)\n      .then(weather => {\n        setWeatherData(weather);\n        setError(null);\n      })\n      .catch(err => {\n        setError(err.message);\n      });\n\n      getForecast(lat, long)\n        .then(data => {\n          setForecast(data);\n          setError(null);\n        })\n        .catch(err => {\n          setError(err.message);\n        });\n\n  }, [lat,long,error])\n\n  function handleResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(\"Please Enable your Location in your browser!\");\n    }\n  }\n\n  function getWeather(lat, long) {\n    return fetch(\n      `${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n    )\n      .then(res => handleResponse(res))\n      .then(weather => {\n        if (Object.entries(weather).length) {\n          const mappedData = mapDataToWeatherInterface(weather);\n          return mappedData;\n        }\n      });\n  }\n  \n  function getForecast(lat, long) {\n    return fetch(\n      `${process.env.REACT_APP_API_URL}/forecast/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n    )\n      .then(res => handleResponse(res))\n      .then(forecastData => {\n        if (Object.entries(forecastData).length) {\n          return forecastData.list\n            .filter(forecast => forecast.dt_txt.match(/09:00:00/))\n            .map(mapDataToWeatherInterface);\n        }\n      });\n  }\n\n  function mapDataToWeatherInterface(data) {\n    const mapped = {\n      date: data.dt * 1000, // convert from seconds to milliseconds\n      description: data.weather[0].main,\n      temperature: Math.round(data.main.temp),\n    };\n  \n    // Add extra properties for the five day forecast: dt_txt, icon, min, max\n    if (data.dt_txt) {\n      mapped.dt_txt = data.dt_txt;\n    }\n  \n    return mapped;\n  }\n  \n  return (\n    <div className=\"App\">\n      {(typeof weatherData.main != 'undefined') ? (\n        <div>\n          <Weather weatherData={weatherData}/>\n          <Forecast forecast={forecast} weatherData={weatherData}/>\n        </div>\n      ): (\n        <div>\n          <Dimmer active>\n            <Loader>Loading..</Loader>\n          </Dimmer>\n        </div>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}